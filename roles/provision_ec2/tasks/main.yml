---
- name: Find Ubuntu AMI.
  ec2_ami_search: distro=ubuntu 
                  release=trusty
                  region={{ region }}
                  store=ebs
                  stream=server
                  arch=amd64
  register: ubuntu_image
- name: Create security group.
  ec2_group:
    name: "{{ group }}"
    description: "Device cloud server security group."
    aws_access_key: "{{ access_key }}"
    aws_secret_key: "{{ secret_key }}"
    region: "{{ region }}"
    rules:
    - proto: tcp
      from_port: 22 
      to_port: 22 
      cidr_ip: 0.0.0.0/0
    - proto: tcp
      from_port: 80
      to_port: 80
      cidr_ip: 0.0.0.0/0
    - proto: tcp
      from_port: 443
      to_port: 443
      cidr_ip: 0.0.0.0/0
    - proto: tcp
      from_port: 8883
      to_port: 8883
      cidr_ip: 0.0.0.0/0
- name: Provision server in Amazon EC2.
  ec2: image={{ ubuntu_image.ami }}
       instance_type={{ instance_type }}
       aws_access_key={{ access_key }}
       aws_secret_key={{ secret_key }}
       keypair={{ keypair }}
       instance_tags='{"broker":"True"}'
       region={{ region }}
       group={{ group }}
       wait=true
       exact_count=1
       count_tag="broker"
  register: ec2_info
- name: Associate elastic IP with server.
  ec2_eip: instance_id={{ ec2_info.tagged_instances[0].id }} 
           public_ip={{ elastic_ip }}
           aws_access_key={{ access_key }}
           aws_secret_key={{ secret_key }}
           region={{ region }}
  when: elastic_ip is defined
- name: Register server as broker.
  add_host: hostname={{ ec2_info.tagged_instances[0].public_ip }} 
            groupname=broker
            ansible_ssh_user={{ username }}
            ansible_ssh_private_key_file={{ ssh_key }}
- name: Set broker_name if not set.
  set_fact: broker_name={{ ec2_info.tagged_instances[0].public_dns_name }}
  when: broker_name is not defined
- name: Wait for server to have SSH running.
  wait_for:
    state=started
    host={{ item.public_ip }}
    port=22
  with_items: ec2_info.tagged_instances
