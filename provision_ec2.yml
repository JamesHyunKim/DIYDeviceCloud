# Provision a single Amazon EC2 instance as the device cloud broker.
---
- hosts: local
  gather_facts: False
  vars:
    # Name of keypair to associate with instance.
    # You shouldn't need to change this.
    keypair:  "devicecloud"
    # Security group name to associate with instance.  This group should have ports 22 and 8883 open.
    group:         "devicecloud"
    # Username of the account to use for installation on the server.
    # Keep this the default 'ubuntu' unless you've changed the AMI image.
    username: "ubuntu"
    # Instance type.  Keep this as micro unless you know you need (and will pay for) a larger instance.
    instance_type: "t1.micro"
  tasks:
  - name: Create certs subdirectory.
    local_action: file path=./certs/ state=directory
  - name: Generate key pair for server.
    local_action: command ssh-keygen -t rsa -N '' -f ./certs/server_ec2 creates=./certs/server_ec2
  - name: Set private key permission to private.
    local_action: file path=./certs/server_ec2 mode=600
  - name: Get server key pair from EC2.
    ec2_key: name={{ keypair }}
             key_material="{{ item }}"
             aws_access_key={{ access_key }}
             aws_secret_key={{ secret_key }}
             region={{ region }}
    with_file: ./certs/server_ec2.pub
    register: ec2_keypair
  - name: Find Ubuntu AMI.
    ec2_ami_search: distro=ubuntu 
                    release=trusty
                    region={{ region }}
                    store=ebs
                    stream=server
                    arch=amd64
    register: ubuntu_image
  - name: Create security group for server.
    ec2_group:
      name: devicecloud
      description: "Device cloud server security group."
      aws_access_key: "{{ access_key }}"
      aws_secret_key: "{{ secret_key }}"
      region: "{{ region }}"
      rules:
      - proto: tcp
        from_port: 22 
        to_port: 22 
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 8883
        to_port: 8883
        cidr_ip: 0.0.0.0/0
  - name: Provision server in Amazon EC2.
    ec2: image={{ ubuntu_image.ami }}
         instance_type={{ instance_type }}
         aws_access_key={{ access_key }}
         aws_secret_key={{ secret_key }}
         keypair={{ keypair }}
         instance_tags='{"broker":"True"}'
         region={{ region }}
         group={{ group }}
         wait=true
         exact_count=1
         count_tag="broker"
    register: ec2_info
  - name: Associate elastic IP with server.
    ec2_eip: instance_id={{ ec2_info.tagged_instances[0].id }} 
             public_ip={{ elastic_ip }}
             aws_access_key={{ access_key }}
             aws_secret_key={{ secret_key }}
             region={{ region }}
    when: elastic_ip is defined
  - name: Register server as broker.
    add_host: hostname={{ item.public_ip }} 
              groupname=broker
              ansible_ssh_user={{ username }}
              ansible_ssh_private_key_file=./certs/server_ec2
    with_items: ec2_info.tagged_instances
  - name: Wait for server to have SSH running.
    wait_for:
      state=started
      host={{ item.public_ip }}
      port=22
    with_items: ec2_info.tagged_instances
- hosts: broker
  sudo: yes
  tasks:
  - name: Copy FreeDNS update script.
    template: src=afraid.aws.sh.j2 dest=/etc/cron.d/afraid.aws.sh owner=root mode=500
    when: freedns_update is defined
  - name: Setup FreeDNS cron job.
    cron: minute="*/10" job="/etc/cron.d/afraid.aws.sh >/dev/null" name="FreeDNS update"
    when: freedns_update is defined
  - name: Delete FreeDNS script old IP file.
    file: path=/tmp/ip.tmpfile state=absent
  - name: Run FreeDNS update script.
    command: /etc/cron.d/afraid.aws.sh
    when: freedns_update is defined

